package com.caizhidao.jiaoyisuo.sim;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.0-milestone2
 * 2014-06-08T16:08:57.452+08:00
 * Generated source version: 3.0.0-milestone2
 * 
 */
@WebServiceClient(name = "openMiAccountForUnitService", 
                  wsdlLocation = "http://www.cms-tjpme.com/services/openMiAccountForUnitService?wsdl",
//        		  wsdlLocation = "http://123.150.41.139:18080/services/openMiAccountForUnitService?wsdl",
                  targetNamespace = "http://impl.service.ta.ctis.com") 
public class OpenMiAccountForUnitService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://impl.service.ta.ctis.com", "openMiAccountForUnitService");
    public final static QName OpenMiAccountForUnitServiceHttpEndpoint = new QName("http://impl.service.ta.ctis.com", "openMiAccountForUnitServiceHttpEndpoint");
    public final static QName OpenMiAccountForUnitServiceHttpSoap12Endpoint = new QName("http://impl.service.ta.ctis.com", "openMiAccountForUnitServiceHttpSoap12Endpoint");
    public final static QName OpenMiAccountForUnitServiceHttpSoap11Endpoint = new QName("http://impl.service.ta.ctis.com", "openMiAccountForUnitServiceHttpSoap11Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://www.cms-tjpme.com/services/openMiAccountForUnitService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(OpenMiAccountForUnitService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://www.cms-tjpme.com/services/openMiAccountForUnitService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public OpenMiAccountForUnitService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OpenMiAccountForUnitService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OpenMiAccountForUnitService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public OpenMiAccountForUnitService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public OpenMiAccountForUnitService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public OpenMiAccountForUnitService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    /**
     *
     * @return
     *     returns OpenMiAccountForUnitServicePortType
     */
    @WebEndpoint(name = "openMiAccountForUnitServiceHttpEndpoint")
    public OpenMiAccountForUnitServicePortType getOpenMiAccountForUnitServiceHttpEndpoint() {
        return super.getPort(OpenMiAccountForUnitServiceHttpEndpoint, OpenMiAccountForUnitServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OpenMiAccountForUnitServicePortType
     */
    @WebEndpoint(name = "openMiAccountForUnitServiceHttpEndpoint")
    public OpenMiAccountForUnitServicePortType getOpenMiAccountForUnitServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(OpenMiAccountForUnitServiceHttpEndpoint, OpenMiAccountForUnitServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns OpenMiAccountForUnitServicePortType
     */
    @WebEndpoint(name = "openMiAccountForUnitServiceHttpSoap12Endpoint")
    public OpenMiAccountForUnitServicePortType getOpenMiAccountForUnitServiceHttpSoap12Endpoint() {
        return super.getPort(OpenMiAccountForUnitServiceHttpSoap12Endpoint, OpenMiAccountForUnitServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OpenMiAccountForUnitServicePortType
     */
    @WebEndpoint(name = "openMiAccountForUnitServiceHttpSoap12Endpoint")
    public OpenMiAccountForUnitServicePortType getOpenMiAccountForUnitServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(OpenMiAccountForUnitServiceHttpSoap12Endpoint, OpenMiAccountForUnitServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns OpenMiAccountForUnitServicePortType
     */
    @WebEndpoint(name = "openMiAccountForUnitServiceHttpSoap11Endpoint")
    public OpenMiAccountForUnitServicePortType getOpenMiAccountForUnitServiceHttpSoap11Endpoint() {
        return super.getPort(OpenMiAccountForUnitServiceHttpSoap11Endpoint, OpenMiAccountForUnitServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OpenMiAccountForUnitServicePortType
     */
    @WebEndpoint(name = "openMiAccountForUnitServiceHttpSoap11Endpoint")
    public OpenMiAccountForUnitServicePortType getOpenMiAccountForUnitServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(OpenMiAccountForUnitServiceHttpSoap11Endpoint, OpenMiAccountForUnitServicePortType.class, features);
    }

}
