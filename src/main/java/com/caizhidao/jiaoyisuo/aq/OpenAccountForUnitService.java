package com.caizhidao.jiaoyisuo.aq;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.0-milestone2
 * 2014-06-08T16:09:43.371+08:00
 * Generated source version: 3.0.0-milestone2
 * 
 */
@WebServiceClient(name = "openAccountForUnitService", 
                  wsdlLocation = "http://www.cms-tjpme.com/services/openAccountForUnitService?wsdl",
//				  wsdlLocation = "http://123.150.41.139:18080/services/openAccountForUnitService?wsdl",
                  targetNamespace = "http://impl.service.ta.ctis.com") 
public class OpenAccountForUnitService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://impl.service.ta.ctis.com", "openAccountForUnitService");
    public final static QName OpenAccountForUnitServiceHttpEndpoint = new QName("http://impl.service.ta.ctis.com", "openAccountForUnitServiceHttpEndpoint");
    public final static QName OpenAccountForUnitServiceHttpSoap11Endpoint = new QName("http://impl.service.ta.ctis.com", "openAccountForUnitServiceHttpSoap11Endpoint");
    public final static QName OpenAccountForUnitServiceHttpSoap12Endpoint = new QName("http://impl.service.ta.ctis.com", "openAccountForUnitServiceHttpSoap12Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://www.cms-tjpme.com/services/openAccountForUnitService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(OpenAccountForUnitService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://www.cms-tjpme.com/services/openAccountForUnitService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public OpenAccountForUnitService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OpenAccountForUnitService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OpenAccountForUnitService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public OpenAccountForUnitService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public OpenAccountForUnitService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }
    public OpenAccountForUnitService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    @WebEndpoint(name = "openAccountForUnitServiceHttpEndpoint")
    public OpenAccountForUnitServicePortType getOpenAccountForUnitServiceHttpEndpoint() {
        return super.getPort(OpenAccountForUnitServiceHttpEndpoint, OpenAccountForUnitServicePortType.class);
    }

    @WebEndpoint(name = "openAccountForUnitServiceHttpEndpoint")
    public OpenAccountForUnitServicePortType getOpenAccountForUnitServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(OpenAccountForUnitServiceHttpEndpoint, OpenAccountForUnitServicePortType.class, features);
    }
    @WebEndpoint(name = "openAccountForUnitServiceHttpSoap11Endpoint")
    public OpenAccountForUnitServicePortType getOpenAccountForUnitServiceHttpSoap11Endpoint() {
        return super.getPort(OpenAccountForUnitServiceHttpSoap11Endpoint, OpenAccountForUnitServicePortType.class);
    }

    @WebEndpoint(name = "openAccountForUnitServiceHttpSoap11Endpoint")
    public OpenAccountForUnitServicePortType getOpenAccountForUnitServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(OpenAccountForUnitServiceHttpSoap11Endpoint, OpenAccountForUnitServicePortType.class, features);
    }
    @WebEndpoint(name = "openAccountForUnitServiceHttpSoap12Endpoint")
    public OpenAccountForUnitServicePortType getOpenAccountForUnitServiceHttpSoap12Endpoint() {
        return super.getPort(OpenAccountForUnitServiceHttpSoap12Endpoint, OpenAccountForUnitServicePortType.class);
    }

    @WebEndpoint(name = "openAccountForUnitServiceHttpSoap12Endpoint")
    public OpenAccountForUnitServicePortType getOpenAccountForUnitServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(OpenAccountForUnitServiceHttpSoap12Endpoint, OpenAccountForUnitServicePortType.class, features);
    }

}
